{"version":3,"file":"ContentQuery.79eb4b5c.js","sources":["../../../../../../node_modules/@nuxt/content/dist/runtime/components/ContentQuery.vue"],"sourcesContent":["<script>\nimport { hash } from \"ohash\";\nimport { toRefs, defineComponent, h, useSlots } from \"vue\";\nimport { computed, useAsyncData, queryContent } from \"#imports\";\nexport default defineComponent({\n  name: \"ContentQuery\",\n  props: {\n    path: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    only: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    without: {\n      type: Array,\n      required: false,\n      default: void 0\n    },\n    where: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    sort: {\n      type: Object,\n      required: false,\n      default: void 0\n    },\n    limit: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    skip: {\n      type: Number,\n      required: false,\n      default: void 0\n    },\n    locale: {\n      type: String,\n      required: false,\n      default: void 0\n    },\n    find: {\n      type: String,\n      required: false,\n      default: void 0\n    }\n  },\n  async setup(props) {\n    const {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = toRefs(props);\n    const isPartial = computed(() => path.value?.includes(\"/_\"));\n    const { data, refresh } = await useAsyncData(\n      `content-query-${hash(props)}`,\n      () => {\n        let queryBuilder;\n        if (path.value) {\n          queryBuilder = queryContent(path.value);\n        } else {\n          queryBuilder = queryContent();\n        }\n        if (only.value) {\n          queryBuilder = queryBuilder.only(only.value);\n        }\n        if (without.value) {\n          queryBuilder = queryBuilder.without(without.value);\n        }\n        if (where.value) {\n          queryBuilder = queryBuilder.where(where.value);\n        }\n        if (sort.value) {\n          queryBuilder = queryBuilder.sort(sort.value);\n        }\n        if (limit.value) {\n          queryBuilder = queryBuilder.limit(limit.value);\n        }\n        if (skip.value) {\n          queryBuilder = queryBuilder.skip(skip.value);\n        }\n        if (locale.value) {\n          queryBuilder = queryBuilder.where({ _locale: locale.value });\n        }\n        if (find.value === \"one\") {\n          return queryBuilder.findOne();\n        }\n        if (find.value === \"surround\") {\n          if (!path.value) {\n            console.warn(\"[Content] Surround queries requires `path` prop to be set.\");\n            console.warn(\"[Content] Query without `path` will return regular `find()` results.\");\n            return queryBuilder.find();\n          }\n          return queryBuilder.findSurround(path);\n        }\n        return queryBuilder.find();\n      }\n    );\n    return {\n      isPartial,\n      data,\n      refresh\n    };\n  },\n  render(ctx) {\n    const slots = useSlots();\n    const {\n      data,\n      refresh,\n      isPartial,\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    } = ctx;\n    const props = {\n      path,\n      only,\n      without,\n      where,\n      sort,\n      limit,\n      skip,\n      locale,\n      find\n    };\n    if (props.find === \"one\") {\n      if (!data && slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n      if (data?._type === \"markdown\" && !data?.body?.children.length) {\n        return slots.empty({ props, ...this.$attrs });\n      }\n    } else if (!data || !data.length) {\n      if (slots?.[\"not-found\"]) {\n        return slots[\"not-found\"]({ props, ...this.$attrs });\n      }\n    }\n    if (slots?.default) {\n      return slots.default({ data, refresh, isPartial, props, ...this.$attrs });\n    }\n    const emptyNode = (slot, data2) => h(\"pre\", null, JSON.stringify({ message: \"You should use slots with <ContentQuery>!\", slot, data: data2 }, null, 2));\n    return emptyNode(\"default\", { data, props, isPartial });\n  }\n});\n</script>\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAIA,MAAA,YAAA,gBAAA;AAAA,EACA,MAAA;AAAA,EACA,OAAA;AAAA;;MAGA,UAAA;AAAA;;;;MAKA,UAAA;AAAA;;IAGA,SAAA;AAAA;MAEA,UAAA;AAAA;;IAGA,OAAA;AAAA;MAEA,UAAA;AAAA;;;;MAKA,UAAA;AAAA;;IAGA,OAAA;AAAA;MAEA,UAAA;AAAA;;;;MAKA,UAAA;AAAA;;IAGA,QAAA;AAAA;MAEA,UAAA;AAAA;;;;MAKA,UAAA;AAAA;IAEA;AAAA;EAEA,MAAA,MAAA,OAAA;;;;MAIA;AAAA;;;;MAKA;AAAA,MACA;AAAA,IACA,IAAA,OAAA,KAAA;;;;;AAEA,UAAA,EAAA,MAAA,QAAA,IAAA,MAAA;AAAA,MACA,iBAAA,KAAA,KAAA;AAAA;AAEA,YAAA;AACA,YAAA,KAAA,OAAA;AACA,yBAAA,aAAA,KAAA,KAAA;AAAA;;QAGA;AACA,YAAA,KAAA,OAAA;AACA,yBAAA,aAAA,KAAA,KAAA,KAAA;AAAA,QACA;AACA,YAAA,QAAA,OAAA;;QAEA;AACA,YAAA,MAAA,OAAA;AACA,yBAAA,aAAA,MAAA,MAAA,KAAA;AAAA,QACA;AACA,YAAA,KAAA,OAAA;AACA,yBAAA,aAAA,KAAA,KAAA,KAAA;AAAA,QACA;AACA,YAAA,MAAA,OAAA;AACA,yBAAA,aAAA,MAAA,MAAA,KAAA;AAAA,QACA;AACA,YAAA,KAAA,OAAA;AACA,yBAAA,aAAA,KAAA,KAAA,KAAA;AAAA,QACA;AACA,YAAA,OAAA,OAAA;;QAEA;;;QAGA;;AAEA,cAAA,CAAA,KAAA,OAAA;AACA,oBAAA,KAAA,4DAAA;AACA,oBAAA,KAAA,sEAAA;;UAEA;AACA,iBAAA,aAAA,aAAA,IAAA;AAAA,QACA;;MAEA;AAAA;AAEA,WAAA;AAAA,MACA;AAAA;MAEA;AAAA;;;;AAIA,UAAA,QAAA;;;MAGA;AAAA,MACA;AAAA;;MAGA;AAAA;;;;MAKA;AAAA,MACA;AAAA;;;;MAKA;AAAA;;;;MAKA;AAAA,MACA;AAAA;;AAGA,UAAA,CAAA,SAAA,+BAAA,eAAA;;MAEA;;AAEA,eAAA,MAAA,MAAA,EAAA,OAAA,GAAA,KAAA,OAAA,CAAA;AAAA,MACA;AAAA;;;MAIA;AAAA,IACA;AACA,QAAA,+BAAA,SAAA;AACA,aAAA,MAAA,QAAA,EAAA,MAAA,SAAA,WAAA,OAAA,GAAA,KAAA,OAAA,CAAA;AAAA,IACA;AACA,UAAA,YAAA,CAAA,MAAA,UAAA,EAAA,OAAA,MAAA,KAAA,UAAA,EAAA,SAAA,6CAAA,MAAA,MAAA,MAAA,GAAA,MAAA,CAAA,CAAA;;EAEA;AACA,CAAA;;;;;;;"}